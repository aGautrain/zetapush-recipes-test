macroscript test__arithmetic_main(
	
) {
	/** Addition */
	var added = 1 + 1;
	assert added == 2 ERROR_INVALID_ARITHMETIC 'Expected 2 but got ...';
	/** Multiplication */
	var multiplied = added * added;
	assert multiplied == 4 ERROR_INVALID_ARITHMETIC 'Expected 4 but got ...';
	/** Pow */
	var powed = math:pow(multiplied, added);
	assert powed == 16 ERROR_INVALID_ARITHMETIC 'Expected 8 but got ...';
	/** Division */
	var divided = powed / added;
	assert divided == 8 ERROR_INVALID_ARITHMETIC 'Expected 3 but got ...';
	/** Comparison */
	assert '11' == 11 ERROR_INVALID_ARITHMETIC 'Expected \'11\' but got ...';
	assert 11 == '11' ERROR_INVALID_ARITHMETIC 'Expected 11 but got ...';
} return {

} on channel __selfName

macroscript test__arithmetic_divide_by_zero(
	
) {
	/** Divide by zero */
	var infinity = 1 / 0;
	//assert infinity == 1 ERROR_INVALID_ARITHMETIC 'Expected Infinity but got ...';
	/** */
	var nan = infinity / infinity;
	//assert nan == 1 ERROR_INVALID_ARITHMETIC 'Expected NaN but got ...';
} return {
	infinity,
	nan
} on channel __selfName

macroscript test__arithmetic_list(
	
) {
	/** List */
	var infinity = 0 / 0;
	var nan = infinity / infinity;
	var list = [];
	var list_infinity = list + infinity;
	assert list_infinity[0] == infinity ERROR_INVALID_ARITHMETIC 'Expected `infinity` but got ...';
	var list_nan = list + nan;
	assert list_nan[0] == nan ERROR_INVALID_ARITHMETIC 'Expected `nan` but got ...';
} return {

} on channel __selfName

macroscript test__arithmetic_object(
	
) {
	/** List */
	var list = [];
	list = list + "a";
	assert list[0] == "a" ERROR_INVALID_ARITHMETIC 'Expected a but got ...';
	/** Map */
	var map = {};
	map = map + { a: "a" };
	// TODO PABLOFIX https://trello.com/c/tEtFpmjk/356-operateur-arithmetique-non-implemente-pour-les-objets-inline
	//assert map.a == "a" ERROR_INVALID_ARITHMETIC 'Expected a but got ...';
	map += { b: "b" };
	assert map.b == "b" ERROR_INVALID_ARITHMETIC 'Expected b but got ...';
	map += { b: "B" };
	assert map.b == "B" ERROR_INVALID_ARITHMETIC 'Expected B but got ...';
	/** */
	var joined = null + { a: "a" } + { b: "b" };
	var joined_string = 'a' + null;
	var joined_map = map + null;
	var joined_list = list + null;
	assert joined_list[0] == null ERROR_INVALID_ARITHMETIC 'Expected null but got ...';
	var joined_null = null + null;
	assert joined_null == null ERROR_INVALID_ARITHMETIC 'Expected null but got ...';
	var joined_list_3 = coll:addAll([], [null]);
	assert joined_list_3[0] == null ERROR_INVALID_ARITHMETIC 'Expected null but got ...';
} return {

} on channel __selfName

macroscript test__arithmetic_numeric_string(
	
) {
	/** Addition */
	var added = "1" + "1";
	assert added == "11" ERROR_INVALID_ARITHMETIC 'Expected 11 but got ...';
	/** Multiplication */
	var multiplied = "2" * "2";
	assert multiplied == 4 ERROR_INVALID_ARITHMETIC 'Expected 4 but got ...';
	/** Division */
	var divided = "2" / "2";
	assert divided == 1 ERROR_INVALID_ARITHMETIC 'Expected 1 but got ...';
	/** Addition */
	assert '2' + 4 == '24' ERROR_INVALID_ARITHMETIC 'Expected 24 but got ...';
	assert 4 + '2' == '6' ERROR_INVALID_ARITHMETIC 'Expected 6 but got ...';
} return {

} on channel __selfName

macroscript test__arithmetic_basic_string(
	
) {
	/** Addition */
	var added = "A" + "B";
	assert added == "AB" ERROR_INVALID_ARITHMETIC 'Expected 11 but got ...';
	/* Multiplication */
	//var multiplied = "A" * "B";//EXPRESSION_EVALUATION
	//assert multiplied == 4 ERROR_INVALID_ARITHMETIC 'Expected 4 but got ...';
	/* Division */
	//var divided = "A" / "B";
	//assert divided == 1 ERROR_INVALID_ARITHMETIC 'Expected 1 but got ...';
	
	var n1 = "-9223372036854775808/-1";
	var n2 = "-1E+02";
	var nn3 = 9223372036854775808;
	var n3 = 9223372036854775808 / -1;
	var n4 = "2.2250738585072011e-308";
	//var n4 = "" + n3;
	var n5 = n2 + 1;
	
	var hex = 0x000000;
	
	var strings = [
	 "Ṱ̺̺̕o͞ ̷i̲̬͇̪͙n̝̗͕v̟̜̘̦͟o̶̙̰̠kè͚̮̺̪̹̱̤ ̖t̝͕̳̣̻̪͞h̼͓̲̦̳̘̲e͇̣̰̦̬͎ ̢̼̻̱̘h͚͎͙̜̣̲ͅi̦̲̣̰̤v̻͍e̺̭̳̪̰-m̢iͅn̖̺̞̲̯̰d̵̼̟͙̩̼̘̳ ̞̥̱̳̭r̛̗̘e͙p͠r̼̞̻̭̗e̺̠̣͟s̘͇̳͍̝͉e͉̥̯̞̲͚̬͜ǹ̬͎͎̟̖͇̤t͍̬̤͓̼̭͘ͅi̪̱n͠g̴͉ ͏͉ͅc̬̟h͡a̫̻̯͘o̫̟̖͍̙̝͉s̗̦̲.̨̹͈̣", 
	  "̡͓̞ͅI̗̘̦͝n͇͇͙v̮̫ok̲̫̙͈i̖͙̭̹̠̞n̡̻̮̣̺g̲͈͙̭͙̬͎ ̰t͔̦h̞̲e̢̤ ͍̬̲͖f̴̘͕̣è͖ẹ̥̩l͖͔͚i͓͚̦͠n͖͍̗͓̳̮g͍ ̨o͚̪͡f̘̣̬ ̖̘͖̟͙̮c҉͔̫͖͓͇͖ͅh̵̤̣͚͔á̗̼͕ͅo̼̣̥s̱͈̺̖̦̻͢.̛̖̞̠̫̰", 
	  "̗̺͖̹̯͓Ṯ̤͍̥͇͈h̲́e͏͓̼̗̙̼̣͔ ͇̜̱̠͓͍ͅN͕͠e̗̱z̘̝̜̺͙p̤̺̹͍̯͚e̠̻̠͜r̨̤͍̺̖͔̖̖d̠̟̭̬̝͟i̦͖̩͓͔̤a̠̗̬͉̙n͚͜ ̻̞̰͚ͅh̵͉i̳̞v̢͇ḙ͎͟-҉̭̩̼͔m̤̭̫i͕͇̝̦n̗͙ḍ̟ ̯̲͕͞ǫ̟̯̰̲͙̻̝f ̪̰̰̗̖̭̘͘c̦͍̲̞͍̩̙ḥ͚a̮͎̟̙͜ơ̩̹͎s̤.̝̝ ҉Z̡̖̜͖̰̣͉̜a͖̰͙̬͡l̲̫̳͍̩g̡̟̼̱͚̞̬ͅo̗͜.̟", 
	  "̦H̬̤̗̤͝e͜ ̜̥̝̻͍̟́w̕h̖̯͓o̝͙̖͎̱̮ ҉̺̙̞̟͈W̷̼̭a̺̪͍į͈͕̭͙̯̜t̶̼̮s̘͙͖̕ ̠̫̠B̻͍͙͉̳ͅe̵h̵̬͇̫͙i̹͓̳̳̮͎̫̕n͟d̴̪̜̖ ̰͉̩͇͙̲͞ͅT͖̼͓̪͢h͏͓̮̻e̬̝̟ͅ ̤̹̝W͙̞̝͔͇͝ͅa͏͓͔̹̼̣l̴͔̰̤̟͔ḽ̫.͕", 
	  "Z̮̞̠͙͔ͅḀ̗̞͈̻̗Ḷ͙͎̯̹̞͓G̻O̭̗̮", 
	  "˙ɐnbᴉlɐ ɐuƃɐɯ ǝɹolop ʇǝ ǝɹoqɐl ʇn ʇunpᴉpᴉɔuᴉ ɹodɯǝʇ poɯsnᴉǝ op pǝs 'ʇᴉlǝ ƃuᴉɔsᴉdᴉpɐ ɹnʇǝʇɔǝsuoɔ 'ʇǝɯɐ ʇᴉs ɹolop ɯnsdᴉ ɯǝɹo˥", 
	  "00˙Ɩ$-"
	];
} return {
	n1, n2, n5, n4: n4 +1, strings
} on channel __selfName